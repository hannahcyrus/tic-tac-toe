{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1db4c9d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " | | \n",
      "-+-+-\n",
      " | | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for O. Which place you want go?\n",
      "Your choices are :\n",
      "top-L top-M top-R mid-L mid-M mid-R low-L low-M low-R top-R\n",
      " | |O\n",
      "-+-+-\n",
      " | | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for X. Which place you want go?\n",
      "Your choices are :\n",
      "top-L top-M mid-L mid-M mid-R low-L low-M low-R top-L\n",
      "X| |O\n",
      "-+-+-\n",
      " | | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for O. Which place you want go?\n",
      "Your choices are :\n",
      "top-M mid-L mid-M mid-R low-L low-M low-R top-M\n",
      "X|O|O\n",
      "-+-+-\n",
      " | | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for X. Which place you want go?\n",
      "Your choices are :\n",
      "mid-L mid-M mid-R low-L low-M low-R mid-L\n",
      "X|O|O\n",
      "-+-+-\n",
      "X| | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for O. Which place you want go?\n",
      "Your choices are :\n",
      "mid-M mid-R low-L low-M low-R mid_r\n",
      "Incorrect Move\n",
      "X|O|O\n",
      "-+-+-\n",
      "X| | \n",
      "-+-+-\n",
      " | | \n",
      "Turn for X. Which place you want go?\n",
      "Your choices are :\n",
      "mid-M mid-R low-L low-M low-R mid-R\n",
      "X|O|O\n",
      "-+-+-\n",
      "X| |X\n",
      "-+-+-\n",
      " | | \n",
      "Turn for O. Which place you want go?\n",
      "Your choices are :\n",
      "mid-M low-L low-M low-R mid_M\n",
      "Incorrect Move\n",
      "X|O|O\n",
      "-+-+-\n",
      "X| |X\n",
      "-+-+-\n",
      " | | \n",
      "Turn for X. Which place you want go?\n",
      "Your choices are :\n",
      "mid-M low-L low-M low-R mid-M\n",
      "X|O|O\n",
      "-+-+-\n",
      "X|X|X\n",
      "-+-+-\n",
      " | | \n",
      "X Is the Winner\n",
      "Congratulations!!\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "#Create a dictionary\n",
    "theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',\n",
    "            'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',\n",
    "            'low-L': ' ', 'low-M': ' ', 'low-R': ' '}\n",
    "def printBoard(board):\n",
    "    print(board['top-L'] + '|'+board['top-M']+'|'+board['top-R'])\n",
    "    print('-+-+-')\n",
    "    print(board['mid-L'] + '|'+board['mid-M']+'|' + board['mid-R'])\n",
    "    print('-+-+-')\n",
    "    print(board['low-L'] + '|'+board['low-M']+'|' + board['low-R'])\n",
    "printBoard(theBoard)\n",
    "def isWinner(board,turn):\n",
    "    if not board['top-L']==' ' and board['top-L']==board['top-M'] and not board['top-M']==' ' and board['top-M']==board['top-R']:\n",
    "        print(board['top-L']+ \" Is the Winner\")\n",
    "        return True\n",
    "    elif not board['mid-L']==' ' and board['mid-L']==board['mid-M'] and not board['mid-M']==' ' and board['mid-M']==board['mid-R']:\n",
    "        print(board['mid-L']+ \" Is the Winner\")\n",
    "        return True\n",
    "        \n",
    "    elif not board['low-L'] == ' ' and board['low-L']==board['low-M'] and not board['low-M'] == ' ' and board['low-M']==board['low-R']:\n",
    "        print(board['low-L']+ \" Is the Winner\")\n",
    "        return True\n",
    "    elif not board['top-L']==' ' and board['top-L']==board['mid-L'] and not board['mid-L']==' ' and board['mid-L']==board['low-L']:\n",
    "        print(board['top-L']+ \" Is the Winner\")\n",
    "        return True\n",
    "    elif not board['top-M']==' ' and board['top-M']==board['mid-M'] and not board['mid-M']==' ' and board['mid-M']==board['low-M']:\n",
    "        print(board['top-M']+ \" Is the Winner\")\n",
    "        return True\n",
    "    \n",
    "    elif not board['top-R']==' ' and board['top-R']==board['mid-R'] and not board['mid-R']==' ' and board['mid-R']==board['low-R']:\n",
    "        print(board['top-R']+ \" Is the Winner\")\n",
    "        return True\n",
    "    \n",
    "    #     Digonals check\n",
    "    elif not board['top-L']==' ' and board['top-L']==board['mid-M'] and not board['mid-M']==' ' and board['mid-M']==board['low-R']:\n",
    "        print(board['top-L']+ \" Is the Winner\")\n",
    "        return True\n",
    "    \n",
    "    elif not board['top-R']==' ' and board['top-R']==board['mid-M'] and not board['mid-M']==' ' and board['mid-M']==board['low-L']:\n",
    "        print(board['top-R']+ \" Is the Winner\")\n",
    "        return True\n",
    "\n",
    "def resetBoard(board):\n",
    "    for k in board.keys():\n",
    "        board[k]=' '\n",
    "resetBoard(theBoard)\n",
    "#Let's take two players\n",
    "players = ['X','O']\n",
    "turn = random.choice(players)\n",
    "for i in range(9):\n",
    "    print(\"Turn for \"+turn+ \". Which place you want go?\")\n",
    "    print(\"Your choices are :\")\n",
    "    for k in theBoard.keys():\n",
    "        if theBoard[k]== ' ':\n",
    "            print(k,end=\" \")\n",
    "    move = input()     \n",
    "    if move not in theBoard.keys():\n",
    "        print(\"Incorrect Move\")\n",
    "    theBoard[move] = turn \n",
    "    printBoard(theBoard)\n",
    "    isWon = isWinner(theBoard,turn)     \n",
    "    if isWon:\n",
    "        print(\"Congratulations!!\")\n",
    "        #If someone is winner then reset the board for the next game\n",
    "        resetBoard(theBoard)\n",
    "        break\n",
    "    if turn=='X':\n",
    "        turn = 'O'\n",
    "    else:\n",
    "        turn = 'X'\n",
    "    \n",
    "    if i==8:\n",
    "        print(\"Match draw!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0267de5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdee87f0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
